# coding: utf-8

"""
Influx API Service.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

OpenAPI spec version: 0.1.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SMTPNotificationRuleBase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'subject_template': 'str',
        'body_template': 'str',
        'to': 'str'
    }

    attribute_map = {
        'type': 'type',
        'subject_template': 'subjectTemplate',
        'body_template': 'bodyTemplate',
        'to': 'to'
    }

    def __init__(self, type=None, subject_template=None, body_template=None, to=None):  # noqa: E501,D401,D403
        """SMTPNotificationRuleBase - a model defined in OpenAPI."""  # noqa: E501
        self._type = None
        self._subject_template = None
        self._body_template = None
        self._to = None
        self.discriminator = None

        self.type = type
        self.subject_template = subject_template
        if body_template is not None:
            self.body_template = body_template
        self.to = to

    @property
    def type(self):
        """Get the type of this SMTPNotificationRuleBase.

        :return: The type of this SMTPNotificationRuleBase.
        :rtype: str
        """  # noqa: E501
        return self._type

    @type.setter
    def type(self, type):
        """Set the type of this SMTPNotificationRuleBase.

        :param type: The type of this SMTPNotificationRuleBase.
        :type: str
        """  # noqa: E501
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        self._type = type

    @property
    def subject_template(self):
        """Get the subject_template of this SMTPNotificationRuleBase.

        :return: The subject_template of this SMTPNotificationRuleBase.
        :rtype: str
        """  # noqa: E501
        return self._subject_template

    @subject_template.setter
    def subject_template(self, subject_template):
        """Set the subject_template of this SMTPNotificationRuleBase.

        :param subject_template: The subject_template of this SMTPNotificationRuleBase.
        :type: str
        """  # noqa: E501
        if subject_template is None:
            raise ValueError("Invalid value for `subject_template`, must not be `None`")  # noqa: E501
        self._subject_template = subject_template

    @property
    def body_template(self):
        """Get the body_template of this SMTPNotificationRuleBase.

        :return: The body_template of this SMTPNotificationRuleBase.
        :rtype: str
        """  # noqa: E501
        return self._body_template

    @body_template.setter
    def body_template(self, body_template):
        """Set the body_template of this SMTPNotificationRuleBase.

        :param body_template: The body_template of this SMTPNotificationRuleBase.
        :type: str
        """  # noqa: E501
        self._body_template = body_template

    @property
    def to(self):
        """Get the to of this SMTPNotificationRuleBase.

        :return: The to of this SMTPNotificationRuleBase.
        :rtype: str
        """  # noqa: E501
        return self._to

    @to.setter
    def to(self, to):
        """Set the to of this SMTPNotificationRuleBase.

        :param to: The to of this SMTPNotificationRuleBase.
        :type: str
        """  # noqa: E501
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501
        self._to = to

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, SMTPNotificationRuleBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
