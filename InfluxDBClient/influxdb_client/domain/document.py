# coding: utf-8

"""
Influx API Service.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

OpenAPI spec version: 0.1.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Document(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'meta': 'DocumentMeta',
        'content': 'object',
        'labels': 'list[Label]',
        'links': 'DocumentLinks'
    }

    attribute_map = {
        'id': 'id',
        'meta': 'meta',
        'content': 'content',
        'labels': 'labels',
        'links': 'links'
    }

    def __init__(self, id=None, meta=None, content=None, labels=None, links=None):  # noqa: E501,D401,D403
        """Document - a model defined in OpenAPI."""  # noqa: E501
        self._id = None
        self._meta = None
        self._content = None
        self._labels = None
        self._links = None
        self.discriminator = None

        self.id = id
        self.meta = meta
        self.content = content
        if labels is not None:
            self.labels = labels
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Get the id of this Document.

        :return: The id of this Document.
        :rtype: str
        """  # noqa: E501
        return self._id

    @id.setter
    def id(self, id):
        """Set the id of this Document.

        :param id: The id of this Document.
        :type: str
        """  # noqa: E501
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        self._id = id

    @property
    def meta(self):
        """Get the meta of this Document.

        :return: The meta of this Document.
        :rtype: DocumentMeta
        """  # noqa: E501
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Set the meta of this Document.

        :param meta: The meta of this Document.
        :type: DocumentMeta
        """  # noqa: E501
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501
        self._meta = meta

    @property
    def content(self):
        """Get the content of this Document.

        :return: The content of this Document.
        :rtype: object
        """  # noqa: E501
        return self._content

    @content.setter
    def content(self, content):
        """Set the content of this Document.

        :param content: The content of this Document.
        :type: object
        """  # noqa: E501
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501
        self._content = content

    @property
    def labels(self):
        """Get the labels of this Document.

        :return: The labels of this Document.
        :rtype: list[Label]
        """  # noqa: E501
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Set the labels of this Document.

        :param labels: The labels of this Document.
        :type: list[Label]
        """  # noqa: E501
        self._labels = labels

    @property
    def links(self):
        """Get the links of this Document.

        :return: The links of this Document.
        :rtype: DocumentLinks
        """  # noqa: E501
        return self._links

    @links.setter
    def links(self, links):
        """Set the links of this Document.

        :param links: The links of this Document.
        :type: DocumentLinks
        """  # noqa: E501
        self._links = links

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
