# coding: utf-8

"""
Influx API Service.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

OpenAPI spec version: 0.1.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LinePlusSingleStatProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time_format': 'str',
        'type': 'str',
        'queries': 'list[DashboardQuery]',
        'colors': 'list[DashboardColor]',
        'shape': 'str',
        'note': 'str',
        'show_note_when_empty': 'bool',
        'axes': 'Axes',
        'legend': 'Legend',
        'x_column': 'str',
        'y_column': 'str',
        'shade_below': 'bool',
        'position': 'str',
        'prefix': 'str',
        'suffix': 'str',
        'decimal_places': 'DecimalPlaces'
    }

    attribute_map = {
        'time_format': 'timeFormat',
        'type': 'type',
        'queries': 'queries',
        'colors': 'colors',
        'shape': 'shape',
        'note': 'note',
        'show_note_when_empty': 'showNoteWhenEmpty',
        'axes': 'axes',
        'legend': 'legend',
        'x_column': 'xColumn',
        'y_column': 'yColumn',
        'shade_below': 'shadeBelow',
        'position': 'position',
        'prefix': 'prefix',
        'suffix': 'suffix',
        'decimal_places': 'decimalPlaces'
    }

    def __init__(self, time_format=None, type=None, queries=None, colors=None, shape=None, note=None, show_note_when_empty=None, axes=None, legend=None, x_column=None, y_column=None, shade_below=None, position=None, prefix=None, suffix=None, decimal_places=None):  # noqa: E501,D401,D403
        """LinePlusSingleStatProperties - a model defined in OpenAPI."""  # noqa: E501
        self._time_format = None
        self._type = None
        self._queries = None
        self._colors = None
        self._shape = None
        self._note = None
        self._show_note_when_empty = None
        self._axes = None
        self._legend = None
        self._x_column = None
        self._y_column = None
        self._shade_below = None
        self._position = None
        self._prefix = None
        self._suffix = None
        self._decimal_places = None
        self.discriminator = None

        if time_format is not None:
            self.time_format = time_format
        self.type = type
        self.queries = queries
        self.colors = colors
        self.shape = shape
        self.note = note
        self.show_note_when_empty = show_note_when_empty
        self.axes = axes
        self.legend = legend
        if x_column is not None:
            self.x_column = x_column
        if y_column is not None:
            self.y_column = y_column
        if shade_below is not None:
            self.shade_below = shade_below
        self.position = position
        self.prefix = prefix
        self.suffix = suffix
        self.decimal_places = decimal_places

    @property
    def time_format(self):
        """Get the time_format of this LinePlusSingleStatProperties.

        :return: The time_format of this LinePlusSingleStatProperties.
        :rtype: str
        """  # noqa: E501
        return self._time_format

    @time_format.setter
    def time_format(self, time_format):
        """Set the time_format of this LinePlusSingleStatProperties.

        :param time_format: The time_format of this LinePlusSingleStatProperties.
        :type: str
        """  # noqa: E501
        self._time_format = time_format

    @property
    def type(self):
        """Get the type of this LinePlusSingleStatProperties.

        :return: The type of this LinePlusSingleStatProperties.
        :rtype: str
        """  # noqa: E501
        return self._type

    @type.setter
    def type(self, type):
        """Set the type of this LinePlusSingleStatProperties.

        :param type: The type of this LinePlusSingleStatProperties.
        :type: str
        """  # noqa: E501
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        self._type = type

    @property
    def queries(self):
        """Get the queries of this LinePlusSingleStatProperties.

        :return: The queries of this LinePlusSingleStatProperties.
        :rtype: list[DashboardQuery]
        """  # noqa: E501
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Set the queries of this LinePlusSingleStatProperties.

        :param queries: The queries of this LinePlusSingleStatProperties.
        :type: list[DashboardQuery]
        """  # noqa: E501
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")  # noqa: E501
        self._queries = queries

    @property
    def colors(self):
        """Get the colors of this LinePlusSingleStatProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this LinePlusSingleStatProperties.
        :rtype: list[DashboardColor]
        """  # noqa: E501
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Set the colors of this LinePlusSingleStatProperties.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this LinePlusSingleStatProperties.
        :type: list[DashboardColor]
        """  # noqa: E501
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")  # noqa: E501
        self._colors = colors

    @property
    def shape(self):
        """Get the shape of this LinePlusSingleStatProperties.

        :return: The shape of this LinePlusSingleStatProperties.
        :rtype: str
        """  # noqa: E501
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Set the shape of this LinePlusSingleStatProperties.

        :param shape: The shape of this LinePlusSingleStatProperties.
        :type: str
        """  # noqa: E501
        if shape is None:
            raise ValueError("Invalid value for `shape`, must not be `None`")  # noqa: E501
        self._shape = shape

    @property
    def note(self):
        """Get the note of this LinePlusSingleStatProperties.

        :return: The note of this LinePlusSingleStatProperties.
        :rtype: str
        """  # noqa: E501
        return self._note

    @note.setter
    def note(self, note):
        """Set the note of this LinePlusSingleStatProperties.

        :param note: The note of this LinePlusSingleStatProperties.
        :type: str
        """  # noqa: E501
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501
        self._note = note

    @property
    def show_note_when_empty(self):
        """Get the show_note_when_empty of this LinePlusSingleStatProperties.

        If true, will display note when empty

        :return: The show_note_when_empty of this LinePlusSingleStatProperties.
        :rtype: bool
        """  # noqa: E501
        return self._show_note_when_empty

    @show_note_when_empty.setter
    def show_note_when_empty(self, show_note_when_empty):
        """Set the show_note_when_empty of this LinePlusSingleStatProperties.

        If true, will display note when empty

        :param show_note_when_empty: The show_note_when_empty of this LinePlusSingleStatProperties.
        :type: bool
        """  # noqa: E501
        if show_note_when_empty is None:
            raise ValueError("Invalid value for `show_note_when_empty`, must not be `None`")  # noqa: E501
        self._show_note_when_empty = show_note_when_empty

    @property
    def axes(self):
        """Get the axes of this LinePlusSingleStatProperties.

        :return: The axes of this LinePlusSingleStatProperties.
        :rtype: Axes
        """  # noqa: E501
        return self._axes

    @axes.setter
    def axes(self, axes):
        """Set the axes of this LinePlusSingleStatProperties.

        :param axes: The axes of this LinePlusSingleStatProperties.
        :type: Axes
        """  # noqa: E501
        if axes is None:
            raise ValueError("Invalid value for `axes`, must not be `None`")  # noqa: E501
        self._axes = axes

    @property
    def legend(self):
        """Get the legend of this LinePlusSingleStatProperties.

        :return: The legend of this LinePlusSingleStatProperties.
        :rtype: Legend
        """  # noqa: E501
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Set the legend of this LinePlusSingleStatProperties.

        :param legend: The legend of this LinePlusSingleStatProperties.
        :type: Legend
        """  # noqa: E501
        if legend is None:
            raise ValueError("Invalid value for `legend`, must not be `None`")  # noqa: E501
        self._legend = legend

    @property
    def x_column(self):
        """Get the x_column of this LinePlusSingleStatProperties.

        :return: The x_column of this LinePlusSingleStatProperties.
        :rtype: str
        """  # noqa: E501
        return self._x_column

    @x_column.setter
    def x_column(self, x_column):
        """Set the x_column of this LinePlusSingleStatProperties.

        :param x_column: The x_column of this LinePlusSingleStatProperties.
        :type: str
        """  # noqa: E501
        self._x_column = x_column

    @property
    def y_column(self):
        """Get the y_column of this LinePlusSingleStatProperties.

        :return: The y_column of this LinePlusSingleStatProperties.
        :rtype: str
        """  # noqa: E501
        return self._y_column

    @y_column.setter
    def y_column(self, y_column):
        """Set the y_column of this LinePlusSingleStatProperties.

        :param y_column: The y_column of this LinePlusSingleStatProperties.
        :type: str
        """  # noqa: E501
        self._y_column = y_column

    @property
    def shade_below(self):
        """Get the shade_below of this LinePlusSingleStatProperties.

        :return: The shade_below of this LinePlusSingleStatProperties.
        :rtype: bool
        """  # noqa: E501
        return self._shade_below

    @shade_below.setter
    def shade_below(self, shade_below):
        """Set the shade_below of this LinePlusSingleStatProperties.

        :param shade_below: The shade_below of this LinePlusSingleStatProperties.
        :type: bool
        """  # noqa: E501
        self._shade_below = shade_below

    @property
    def position(self):
        """Get the position of this LinePlusSingleStatProperties.

        :return: The position of this LinePlusSingleStatProperties.
        :rtype: str
        """  # noqa: E501
        return self._position

    @position.setter
    def position(self, position):
        """Set the position of this LinePlusSingleStatProperties.

        :param position: The position of this LinePlusSingleStatProperties.
        :type: str
        """  # noqa: E501
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501
        self._position = position

    @property
    def prefix(self):
        """Get the prefix of this LinePlusSingleStatProperties.

        :return: The prefix of this LinePlusSingleStatProperties.
        :rtype: str
        """  # noqa: E501
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Set the prefix of this LinePlusSingleStatProperties.

        :param prefix: The prefix of this LinePlusSingleStatProperties.
        :type: str
        """  # noqa: E501
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501
        self._prefix = prefix

    @property
    def suffix(self):
        """Get the suffix of this LinePlusSingleStatProperties.

        :return: The suffix of this LinePlusSingleStatProperties.
        :rtype: str
        """  # noqa: E501
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Set the suffix of this LinePlusSingleStatProperties.

        :param suffix: The suffix of this LinePlusSingleStatProperties.
        :type: str
        """  # noqa: E501
        if suffix is None:
            raise ValueError("Invalid value for `suffix`, must not be `None`")  # noqa: E501
        self._suffix = suffix

    @property
    def decimal_places(self):
        """Get the decimal_places of this LinePlusSingleStatProperties.

        :return: The decimal_places of this LinePlusSingleStatProperties.
        :rtype: DecimalPlaces
        """  # noqa: E501
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Set the decimal_places of this LinePlusSingleStatProperties.

        :param decimal_places: The decimal_places of this LinePlusSingleStatProperties.
        :type: DecimalPlaces
        """  # noqa: E501
        if decimal_places is None:
            raise ValueError("Invalid value for `decimal_places`, must not be `None`")  # noqa: E501
        self._decimal_places = decimal_places

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, LinePlusSingleStatProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
